#!/usr/bin/env python3
import os
import sys

script_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
deps_dir = os.path.join(script_dir, ".dependencies")
sys.path.insert(0, deps_dir)

from pathlib import Path
import numpy as np
import torch
from demucs import pretrained
from demucs.apply import apply_model

## requirements: stempeg, gpac
from torchcodec.decoders import AudioDecoder
def load_audio_stereo_441(input_path):
    decoder = AudioDecoder(input_path)
    wav = decoder.get_all_samples()  # shape: (num_channels, num_frames)
    sr = wav.sample_rate
    return wav, sr


def _to_numpy_stems(stems_torch: torch.Tensor):
    """(S, C, T) torch -> (S, T, C) float32 numpy with peak-safe scaling."""
    data = stems_torch.permute(0, 2, 1).contiguous().cpu().numpy().astype("float32")
    peak = np.max(np.abs(data), axis=(1, 2), keepdims=True)
    peak[peak < 1e-9] = 1.0
    return data / np.maximum(peak * 1.01, 1.0)

def _separate_demucs(mix_wave: torch.Tensor, model_name: str = "htdemucs"):
    """Return dict for {'drums','bass','other','vocals'} with arrays shaped (T, C)."""
    device = "cuda" if torch.cuda.is_available() else "cpu"
    model = pretrained.get_model(model_name).to(device)
    with torch.no_grad():
        stems = apply_model(model, mix_wave.to(device)[None, ...], device=device, split=True, overlap=0.25)[0]
    names = getattr(model, "sources", ["drums", "bass", "other", "vocals"])
    data = _to_numpy_stems(stems)  # (S, T, C)
    return {name: data[i] for i, name in enumerate(names)}


def _write_traktor_stem(out_path: str, mix_np, stems_dict, sample_rate: int, title: str,
                        artist: str | None = None, album: str | None = None, cover_path: str | None = None):
    import json
    import os
    import numpy as np
    import stempeg

    # 1) NI order: mix, drums, bass, other, vocals  -> (5, samples, channels)
    data = np.stack(
        [mix_np, stems_dict["drums"], stems_dict["bass"], stems_dict["other"], stems_dict["vocals"]],
        axis=0
    ).astype("float32")

    # 2) Build default metadata **dict**
    with open(stempeg.default_metadata()) as f:  # this returns a path; load JSON into a dict
        meta = json.load(f)
    meta["title"] = title
    if artist:
        meta["artist"] = artist
    if album:
        meta["album"] = album
    if cover_path and os.path.exists(cover_path):
        with open(cover_path, "rb") as cf:
            meta["cover"] = cf.read()  # bytes

    # 3) Per-stem tags (names/colors) for Traktor UI
    stems_meta = [
        {"name": "drums",  "color": "#F0E442"},
        {"name": "bass",   "color": "#56B4E9"},
        {"name": "other",  "color": "#009E73"},
        {"name": "vocals", "color": "#D55E00"},
    ]

    # 4) Create NI writer with dict metadata; do NOT pass metadata to write_stems
    writer = stempeg.NIStemsWriter(
        default_metadata=meta,
        stems_metadata=stems_meta,
        codec="aac",
        bitrate=256000,
        output_sample_rate=44100,
    )

    # 5) Write using the documented signature
    stempeg.write_stems(
        path=str(out_path),
        data=data,
        sample_rate=sample_rate,
        writer=writer, #type: ignore
    )

def process_file(file_path: str, model_name: str = "htdemucs"):
    src = Path(file_path)
    if not src.exists():
        raise FileNotFoundError(f"{src} not found")

    mix_wave, sr = load_audio_stereo_441(str(src))                # torch (2, T), sr = 44100
    mix_np = mix_wave.data.permute(1, 0).contiguous().numpy().astype("float32")  # (T, C)

    stems = _separate_demucs(mix_wave.data, model_name=model_name)

    out = src.with_suffix(".stem.m4a")
    _write_traktor_stem(str(out), mix_np=mix_np, stems_dict=stems, sample_rate=sr, title=src.stem)
    return out

def main():
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <file1> [<file2> ...]")
        sys.exit(1)
    for file in sys.argv[1:]:
        _ = process_file(file)

        from gi.repository import Notify #type: ignore
        Notify.init("STEM Separator")
        notification = Notify.Notification.new(
            "Separated STEMs",
            f"{file}",
            "edit-copy"  # optional icon name from icon theme
        )
        notification.show()

if __name__ == "__main__":
    main()
