#!/usr/bin/env python3
import os
import sys

script_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
deps_dir = os.path.join(script_dir, ".dependencies")
sys.path.insert(0, deps_dir)

from torchvision import transforms
from transformers import AutoModelForImageSegmentation
import torch
from pathlib import Path
from PIL import Image

def process_file(file_arg):

    # 2) Open input and set up output
    input_path = Path(file_arg)
    output_path = os.path.join(input_path.parent, input_path.stem + "_converted.png")

    model = AutoModelForImageSegmentation.from_pretrained('ZhengPeng7/BiRefNet', trust_remote_code=True)
    torch.set_float32_matmul_precision(['high', 'highest'][0])
    model.to('cuda')
    model.eval()

    # Data settings
    image_size = (1024, 1024)
    transform_image = transforms.Compose([
        transforms.Resize(image_size),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])

    image = Image.open(str(input_path))
    input_images = transform_image(image).unsqueeze(0).to('cuda') #type: ignore

    with torch.no_grad():
        preds = model(input_images)[-1].sigmoid().cpu()
    pred = preds[0].squeeze()
    pred_pil = transforms.ToPILImage()(pred)
    mask = pred_pil.resize(image.size)
    image.putalpha(mask)

    image.save(output_path)

def main():
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <file1> [<file2> ...]")
        sys.exit(1)
    for file in sys.argv[1:]:
        _ = process_file(file)

        from gi.repository import Notify #type: ignore
        Notify.init("Background Remover")
        notification = Notify.Notification.new(
            "Background removed",
            f"{file}",
            "edit-copy"  # optional icon name from icon theme
        )
        notification.show()

if __name__ == "__main__":
    main()
