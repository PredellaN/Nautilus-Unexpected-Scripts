#!/usr/bin/env python3

import pandas as pd
import sys, os

# Global cache for adults mapping to avoid loading the reservations file multiple times.
_adults_mapping = None

def safe_strftime(date_val, fmt='%Y-%m-%d'):
    """
    Returns the formatted string for a datetime value if it's not NaT, else returns an empty string.
    """
    if pd.notnull(date_val):
        return date_val.strftime(fmt)
    return ''

def get_number_of_adults(confirmation_code, folder):
    """
    Looks for a reservations.csv file in the given folder.
    If found, returns the number of adults (as an integer) for the given confirmation code.
    If not found or the code is missing, returns 0.
    """
    global _adults_mapping
    if _adults_mapping is None:
        reservations_csv = os.path.join(folder, "reservations.csv")
        if os.path.exists(reservations_csv):
            try:
                df = pd.read_csv(reservations_csv)
                # Normalize column names by stripping spaces
                df.columns = [col.strip() for col in df.columns]
                # Build a dictionary mapping confirmation code to "# of adults" (converted to int)
                _adults_mapping = {}
                for _, row in df.iterrows():
                    code = str(row["Confirmation code"]).strip()
                    try:
                        adults = int(row["# of adults"])
                    except (ValueError, TypeError):
                        adults = 0
                    _adults_mapping[code] = adults
            except Exception as e:
                print(f"Error reading reservations.csv: {e}")
                _adults_mapping = {}
        else:
            _adults_mapping = {}
    return _adults_mapping.get(confirmation_code, 0)

def main(file_path):
    folder = os.path.dirname(file_path)
    filename = os.path.basename(file_path)
    data = pd.read_csv(file_path)

    # Normalize column names: trim spaces and fix "Confirmation Code" vs "Confirmation code"
    data.columns = [col.strip() for col in data.columns]
    if "Confirmation Code" in data.columns and "Confirmation code" not in data.columns:
        data.rename(columns={'Confirmation Code': 'Confirmation code'}, inplace=True)

    # Convert relevant columns to appropriate data types for processing
    data['Booking date'] = pd.to_datetime(data['Booking date'], errors='coerce')
    data['Start date'] = pd.to_datetime(data['Start date'], errors='coerce')
    data['End date'] = pd.to_datetime(data['End date'], errors='coerce')
    data['Amount'] = pd.to_numeric(data['Amount'], errors='coerce')

    # Initialize an empty list to store results
    reservations_summary = []

    # Filter for reservations and iterate over each unique Confirmation code
    reservations = data[data['Type'] == 'Reservation']
    confirmation_codes = reservations['Confirmation code'].unique()

    for code in confirmation_codes:
        # Filter data for the current reservation
        reservation_data = data[data['Confirmation code'] == code]

        # Safely get start and end dates
        booking_date_val = reservation_data['Booking date'].iloc[0]
        start_date_val = reservation_data['Start date'].iloc[0]
        end_date_val = reservation_data['End date'].iloc[0]

        booking_date = safe_strftime(booking_date_val)
        start_date = safe_strftime(start_date_val)
        end_date = safe_strftime(end_date_val)
        guest_name = reservation_data['Guest'].iloc[0]
        
        # Calculate the number of nights
        num_nights = reservation_data['Nights'].iloc[0]

        # Get number of adults from reservations.csv (or 0 if not available)
        adults = get_number_of_adults(code, folder)
        
        # Extract necessary details
        current_reservation = reservations[reservations['Confirmation code'] == code]
        payout = reservation_data['Amount'].sum()
        service_fees = current_reservation['Service fee'].sum()
        cleaning_fees = current_reservation['Cleaning fee'].sum()
        tax_unit_price = 1.077
        tax_qty = adults * num_nights
        taxes = tax_qty * tax_unit_price
        reservation_total = current_reservation['Gross earnings'].sum() - cleaning_fees - taxes
        
        # Append the details to the summary list
        reservations_summary.append({
            'Confirmation Code': code,
            'Guest Name': guest_name,
            'Payout': payout,
            'Reservation Total': reservation_total,
            'Daily Total': reservation_total / num_nights if num_nights else 0,
            'Service Fees Total': service_fees,
            'Cleaning Fees Total': cleaning_fees,
            'Tax Unit Price': tax_unit_price,
            'Tax Qty': tax_qty,
            'Taxes Total': taxes,
            'Booking date': booking_date,
            'Start Date': start_date,
            'End Date': end_date,
            'Number of Nights': num_nights,
            'Number of Guests': adults,  # Use the number from reservations.csv or 0 if not available
        })

    # Convert the summary list into a DataFrame for display
    reservations_summary_df = pd.DataFrame(reservations_summary)
    
    # Sort by Start Date (oldest dates first)
    reservations_summary_df.sort_values(by='Start Date', key=lambda col: pd.to_datetime(col), inplace=True)
    
    output_path = os.path.join(folder, "processed_" + filename)
    reservations_summary_df.to_csv(output_path, index=False)
    print(f"Processed data saved to: {output_path}")

if __name__ == "__main__":
    # Ensure exactly one argument is passed (excluding the script name)
    if len(sys.argv) != 2:
        print("Usage: python script_name.py <csv_file_path>")
        sys.exit(1)  # Exit with error code 1 for incorrect usage

    # Pass the argument to the main function
    main(sys.argv[1])
